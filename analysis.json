{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A selector for OAuth 2.0 scope. Provides the UI to enter a scope for OAuth 2.0 settings.\n\n#### Example\n\n```html\n<oauth2-scope-selector></oauth2-scope-selector>\n```\n\n`allowed-scopes` attribute allows to provide a list of predefined scopes\nsupported by the endpoint. When the list is set, autocomplete is enabled.\nAutocomplete is supported by `paper-autocomplete` element.\n\nSetting `prevent-custom-scopes` dissallows adding a scope that is not defined\nin the `allowed-scopes` array. This can only work with `allowed-scopes` set\n\n#### Example\n\n```html\n<oauth2-scope-selector prevent-custom-scopes allowed-scopes='[\"email\", \"profile\"]'></oauth2-scope-selector>\n```\n\nAnd in JavaScript\n\n```javascript\nvar selector = document.querySelector('oauth2-scope-selector');\nselector.allowedScopes = ['profile', 'email'];\n```\n\n## Adding scope documentation\n\n`allowedScopes` property can be an list of object to present scope description\nafter it is selected. Object in the array has to contain `label` and `description` properties.\n`label` is scope value.\n\n### Example\n\n```javascript\nvar scopes = [\n  {'label': 'user', 'description': 'Grants read/write access to profile info only. Note that this scope includes user:email and user:follow.'},\n  {'label': 'user:email', 'description': 'Grants read access to a user\\'s email addresses.'},\n  {'label': 'user:follow', 'description': 'Grants access to follow or unfollow other users.'}\n];\nconst selector = document.querySelector('oauth2-scope-selector');\nselector.allowedScopes = scopes;\n```\n\nSee demo page for example implementation.\n\n## Use with forms\n\nThe element can be used in a form by using `iron-form` custom element.\nIt's value is reported to the form as any other form input. `name` attribute\nmust be set in order to process the value.\n\n```html\n<iron-form id=\"form\">\n  <form>\n    <oauth2-scope-selector name=\"scope\" required></oauth2-scope-selector>\n  </form>\n</iron-form>\n<script>\nconst form = document.getElementById('form');\nconst values = form.serializeForm();\nconsole.log(values); // {\"scope\": []}\n</script>\n```\n\n## Changes in version 2\n\n- `scopes` property is renamed to `value`\n- The element can now work with `iron-form` as a form element.\n\n### Styling\n`<oauth2-scope-selector>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--oauth2-scope-selector` | Mixin applied to the element | `{}`\n`--oauth2-scope-selector-label` | Mixin applied to the label element (title of the control) | `{}`\n`--oauth2-scope-selector-list-item` | Mixin applied to each selected scope item. Consider setting `paper-item` styles for theming. | `{}`\n`--oauth2-scope-selector-item-description-color` | Color of the description of the scope when `allowedScopes` contains description. | `#737373`\n\n### Theming\nUse this mixins as a theming option across all ARC elements.\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--icon-button` | Mixin applied to `paper-icon-buttons`. | `{}`\n`--icon-button-hover` | Mixin applied to `paper-icon-buttons` when hovered. | `{}`\n`--form-label` | Mixin applied to all labels that are form elements | `{}`\n`--hint-trigger-color` | Color of the add and remove scope buttons | `rgba(0, 0, 0, 0.74)`\n`--hint-trigger-color` | Color of the add and remove scope buttons when hovered | `rgba(0, 0, 0, 0.84)`",
      "summary": "",
      "path": "oauth2-scope-selector.html",
      "properties": [
        {
          "name": "value",
          "type": "Array",
          "description": "List of scopes entered by the user. It can be used it pre-select scopes\nby providing an array with scope values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 8
            },
            "end": {
              "line": 239,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "name",
          "type": "string",
          "description": "Form input name",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 8
            },
            "end": {
              "line": 243,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "currentValue",
          "type": "string",
          "description": "Current value entered by the user. This is not a scope and it is not\nyet in the scopes list. User has to accept the scope before it become\navailable in the scopes list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "inputTarget",
          "type": "HTMLElement",
          "description": "Target for `paper-autocomplete`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 8
            },
            "end": {
              "line": 254,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "allowedScopes",
          "type": "Array",
          "description": "List of available scopes.\nIt can be either list of string or list of object. If this is the\nlist of object then this expects to each object contain a `label`\nand `description` keys.\n\n### Example\n```\n{\n  'label': 'user',\n  'description': 'Grants read/write access to profile info only. '\n}\n```\nWhen the description is provided it will be displayed below the name\nof the scope.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 8
            },
            "end": {
              "line": 271,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "preventCustomScopes",
          "type": "boolean",
          "description": "allowed to be add.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 8
            },
            "end": {
              "line": 274,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_allowedIsObject",
          "type": "boolean",
          "description": "Computed value, true if the `allowedScopes` is a list of objects",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "autoValidate",
          "type": "boolean",
          "description": "Set to true to auto-validate the input value when it changes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 8
            },
            "end": {
              "line": 284,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_autocompleteScopes",
          "type": "Array",
          "description": "List of scopes to be set as autocomplete source.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 8
            },
            "end": {
              "line": 291,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "hasAutocomplete",
          "type": "Object",
          "description": "True if the element has attached autocomplete element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 8
            },
            "end": {
              "line": 300,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "Returns true if the value is invalid.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 8
            },
            "end": {
              "line": 313,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the input as required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 8
            },
            "end": {
              "line": 320,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 4
            },
            "end": {
              "line": 334,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 4
            },
            "end": {
              "line": 338,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "invalid"
            }
          ]
        },
        {
          "name": "_appendScope",
          "description": "Add currently entered scope value to the scopes list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 349,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeScope",
          "description": "Remove scope button click handler",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 4
            },
            "end": {
              "line": 364,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_suggestionSelected",
          "description": "Handler for the `paper-autocomplete` selected event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ]
        },
        {
          "name": "append",
          "description": "Adds a scope to the list. The same as pushing item to the `scopes`\narray but it will check for duplicates first.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 385,
              "column": 4
            },
            "end": {
              "line": 401,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scope",
              "type": "String",
              "description": "Scope value to append"
            }
          ]
        },
        {
          "name": "_findAllowedScopeIndex",
          "description": "Finds an index if the `scope` in the `allowedScopes` list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scope",
              "type": "String",
              "description": "A scope value (label) to find."
            }
          ],
          "return": {
            "type": "Number",
            "desc": "An index of scope or `-1` if not found."
          }
        },
        {
          "name": "_keyDown",
          "description": "A handler for the input's key down event. Handles ENTER press.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_normalizeScopes",
          "description": "Normalizes scopes to use it with autocomplete element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 4
            },
            "end": {
              "line": 453,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scopes",
              "type": "Array",
              "description": "List of autocomplete values. Can be list of\nstrings or objects"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Normalized scopes list for autocomplete."
          }
        },
        {
          "name": "_computeHasAutocomplete",
          "description": "Computes value for `hasAutocomplete`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 460,
              "column": 4
            },
            "end": {
              "line": 462,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scopes",
              "type": "?Array",
              "description": "List of scopes"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if scopes are set"
          }
        },
        {
          "name": "_computeAllowedIsObject",
          "description": "Compute function for the _allowedIsObject. Check first item of the\n`allowedScopes` array if it is an object (return `true`) or\nstring (return `false`);",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 468,
              "column": 4
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "allowedScopes"
            }
          ]
        },
        {
          "name": "_computeItemDescription",
          "description": "Returns a description for the selected scope.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 483,
              "column": 4
            },
            "end": {
              "line": 492,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scope"
            },
            {
              "name": "allowedIsObject",
              "type": "Boolean",
              "description": "True if allowed scopes is an object."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Description of the scope or `` (empty string) if the\nitem do not exists."
          }
        },
        {
          "name": "_getValidity",
          "description": "Returns false if the element is required and does not have a selection,\nand true otherwise.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 501,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "true if `required` is false, or if `required` is true\nand the element has a valid selection."
          }
        },
        {
          "name": "_handleAutoValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 506,
              "column": 4
            },
            "end": {
              "line": 510,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoValidate"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 220,
          "column": 2
        },
        "end": {
          "line": 511,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OAuth2ScopeSelector",
      "attributes": [
        {
          "name": "value",
          "description": "List of scopes entered by the user. It can be used it pre-select scopes\nby providing an array with scope values.",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 8
            },
            "end": {
              "line": 239,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "name",
          "description": "Form input name",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 8
            },
            "end": {
              "line": 243,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "current-value",
          "description": "Current value entered by the user. This is not a scope and it is not\nyet in the scopes list. User has to accept the scope before it become\navailable in the scopes list.",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 28
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "input-target",
          "description": "Target for `paper-autocomplete`",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 8
            },
            "end": {
              "line": 254,
              "column": 9
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        },
        {
          "name": "allowed-scopes",
          "description": "List of available scopes.\nIt can be either list of string or list of object. If this is the\nlist of object then this expects to each object contain a `label`\nand `description` keys.\n\n### Example\n```\n{\n  'label': 'user',\n  'description': 'Grants read/write access to profile info only. '\n}\n```\nWhen the description is provided it will be displayed below the name\nof the scope.",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 8
            },
            "end": {
              "line": 271,
              "column": 28
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "prevent-custom-scopes",
          "description": "allowed to be add.",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 8
            },
            "end": {
              "line": 274,
              "column": 36
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value when it changes.",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 8
            },
            "end": {
              "line": 284,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "has-autocomplete",
          "description": "True if the element has attached autocomplete element.",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 8
            },
            "end": {
              "line": 300,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "invalid",
          "description": "Returns true if the value is invalid.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 8
            },
            "end": {
              "line": 313,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required.",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 8
            },
            "end": {
              "line": 320,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oauth2-scope-selector"
    }
  ]
}
